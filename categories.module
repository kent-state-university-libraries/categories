<?php

/**
 * @file categories.module
 *
 * @author Joe Corall <jcorall@kent.edu>
 */

define('CATEGORIES_NODE', 1);
define('CATEGORIES_ADD', 2);
define('CATEGORIES_NODE_MOVE', 3);
define('CATEGORIES_TRANSFORM', 4);

/**
 * Implements hook_ctools_plugin_directory().
 */
function categories_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function categories_url_inbound_alter(&$path, $original_path, $path_language) {
  // @todo do in hook_boot()??
  $uri = explode('/', $path);
  $count = count($uri);

  // if the user is visiting /taxonomy/term/%
  if ($count == 3 && $uri[0] == 'taxonomy') {
    // see if there is a node that acts as this term's homepage
    $nid = db_query("SELECT entity_id FROM {field_data_field_category_homepage}
      WHERE entity_type = 'node'
      AND field_category_homepage_tid = :tid", array(':tid' => $uri[2]))->fetchField();

    // if there is a homepage node, make it the actual path for this URL
    if ($nid) {
      // contextualize breadcrumb
      // setting this variable sets the breadcrumb appropriately
      // for pages that are linked from multiple homepage nodes
      $_SESSION['categories_tid'] = $uri[2];

      // go to the actual node's page
      drupal_goto("node/$nid");
    }
  }
}

/**
 * Implements hook_menu().
 */
function categories_menu() {
  $items = array();

  $items['node/%node/page'] = array(
    'title' => 'Create a page',
    'page callback' => 'categories_node',
    'page arguments' => array(1, (string) CATEGORIES_NODE),
    'access callback' => 'categories_access',
    'access arguments' => array(1, (string) CATEGORIES_NODE),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 20,
    'file' => 'categories.pages.inc',
  );

  $items['node/%node/new-category'] = array(
    'title' => 'Create a category',
    'page callback' => 'categories_node',
    'page arguments' => array(1, (string) CATEGORIES_ADD),
    'access callback' => 'categories_access',
    'access arguments' => array(1, (string) CATEGORIES_ADD),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 30,
    'file' => 'categories.pages.inc',
  );

  $items['node/%node/category'] = array(
    'title' => 'Turn into a category',
    'description' => 'Turn this page into a category, so other pages can be nested underneath it and it will be visible in the menu navigation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('categories_node_transform', 1),
    'access callback' => 'categories_access',
    'access arguments' => array(1, (string) CATEGORIES_TRANSFORM),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 20,
    'file' => 'categories.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_node_submit().
 */
function categories_node_submit($node, $form, &$form_state) {
 if (!empty($form_state['node']->field_category_homepage[LANGUAGE_NONE][0]['tid'])) {
  $form_state['redirect'] = 'taxonomy/term/' .  $form_state['node']->field_category_homepage[LANGUAGE_NONE][0]['tid'];
 }
}

function categories_access($entity, $action = FALSE) {
  switch ($action) {
    case CATEGORIES_TRANSFORM:
      return $entity->type == 'page' && node_access('update', $entity) && empty($entity->field_category_homepage[LANGUAGE_NONE][0]['tid']);
    case CATEGORIES_ADD:
    case CATEGORIES_NODE:
      return node_access('update', $entity) && !empty($entity->field_category_homepage[LANGUAGE_NONE][0]['tid']);
    case CATEGORIES_NODE_MOVE:
      return user_is_logged_in();
    default:
      return node_access('update', $entity) && $entity->type == 'page';
  }

  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function categories_admin_paths() {
  return array(
    'node/*/page' => TRUE,
    'node/*/new-category' => TRUE,
    'node/*/category' => TRUE,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function categories_form_page_node_form_alter(&$form, &$form_state, $form_id) {
  // if this user isn't an admin for nodes
  // do not let them see the option for category homepages
  if (!user_access('bypass node access')) {
    $form['field_category_homepage']['#attributes']['style'] = 'display:none';
  }

  if (!empty($form['#node']->field_category_homepage[LANGUAGE_NONE][0])) {
    $settings = categories_get_settings($form['#node']->nid);
    $form['category_content'] = array(
      '#type' => 'fieldset',
      '#title' => 'Manage Category Content',
      '#description' => 'Here you can: <ol><li>Manage the pages associated with this category</li><li>Alter some display settings for those pages\' links, which are displayed on the category page</li></ol>',
      '#weight' => 8,
      '#collapsible' => TRUE,
      '#tree' => TRUE,
    );

    $form['category_content']['title'] = array(
      '#title' => 'Content Title',
      '#description' => 'The title that will be displayed over the content. Leave blank for nothing to be displayed',
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#default_value' => $settings ? $settings['title'] : categories_make_possesive_title($form['#node']->title),
    );

    $form_state['category_existing_content'] = array_keys(_categories_get_homepage_nodes($form['#node']->nid, $form['#node']->field_category_homepage[LANGUAGE_NONE][0]['tid']));
    $form['category_content']['content'] = array(
      '#title' => 'Manage Associated Pages',
      '#description' => 'Select pages you want added to this category. Links to these pages will be displayed at the bottom of this category page',
      '#type' => 'select',
      '#options' => categories_get_node_options(),
      '#default_value' => $form_state['category_existing_content'],
      '#multiple' => TRUE,
      '#chosen' => TRUE,
    );

    $form['category_content']['tag'] = array(
      '#title' => 'Link size',
      '#type' => 'select',
      '#options' => array(
        'h2' => 'Largest (header 2)',
        'h3' => 'Larger (header 3)',
        'h4' => 'Large (header 4)',
        'h5' => 'Smaller (header 5)',
        'h6' => 'Small (header 6)',
        'p' => 'Smallest (parapraph)',
      ),
      '#default_value' => $settings ? $settings['tag'] : 'h2',
      '#prefix' => '<label>Link Display Settings</label><table style="border:none;"><tbody><tr><td style="width:50%;">',
      '#suffix' => '</td>'
    );

    $form['category_content']['pager_limit'] = array(
      '#title' => 'Links per page',
      '#description' => 'Set how many links will be displayed on the category page. If there are more links than the number you choose, a pager will be displayed.',
      '#type' => 'select',
      '#options' => array(0 => ' - Display all - ') + drupal_map_assoc(range(5, 50, 5)),
      '#default_value' => $settings ? $settings['pager_limit'] : 25,
      '#prefix' => '<td style="width:50%; border-right:none">',
      '#suffix' => '</td></tr><tr>'
    );

    $form['category_content']['sort_by'] = array(
      '#title' => 'Sort links by',
      '#description' => 'Set which field the links will be sorted by',
      '#type' => 'select',
      '#options' => array(
        'n.created' => 'Date Created',
        'changed' => 'Date Last Updated',
        'title' => 'Page Title',
      ),
      '#default_value' => $settings ? $settings['sort_by'] : 'changed',
      '#prefix' => '<td style="width:50%;">',
      '#suffix' => '</td>'
    );

    $form['category_content']['sort_order'] = array(
      '#title' => 'Sort Direction',
      '#description' => 'Set the order the sort selected for "Sort links by" will be applied',
      '#type' => 'select',
      '#options' => array(
        'ASC' => 'Ascending',
        'DESC' => 'Descending',
      ),
      '#default_value' => $settings ? $settings['sort_order'] : 'DESC',
      '#prefix' => '<td style="width:50%;border-right:none;">',
      '#suffix' => '</td></tr></tbody></table>'
    );


    $form['category_content']['display_author'] = array(
      '#title' => 'Display author information',
      '#description' => 'If you select this option, the name of the last editor and the date the content was last updated will display under the content\'s title',
      '#type' => 'checkbox',
      '#default_value' => $settings ? $settings['display_author'] : TRUE,
    );
    $form['category_content']['summary'] = array(
      '#title' => 'Display summary',
      '#description' => 'Display the summary text for the page directly under its link. Allows for a bit more information about the content to be displayed.',
      '#type' => 'checkbox',
      '#default_value' => $settings ? $settings['summary'] : FALSE,
    );

    $form['#submit'][] = 'categories_content_submit';
  }

  // and the parent_category ID was passed
  // set those values in $form_state, so they persist over AJAX calls
  if (arg(1) == 'add' && isset($_GET['parent_category'])) {
    $new_category = $form_state['new_category'] = !empty($_GET['new_category']);
    $parent_category = $form_state['parent_category'] = $_GET['parent_category'];
  }
  // else this is either an AJAX call on node/add/BUNDLE
  // OR node/add/BUNDLE with no category information passed
  // OR a node edit page
  else {
    $parent_category = isset($form_state['parent_category']) ? $form_state['parent_category'] : FALSE;
    $new_category = isset($form_state['new_category']) ? $form_state['new_category'] : FALSE;
  }

  // if adding a page to a category, or creating a sub category
  // set the default value for the category/page's field_category
  if ($parent_category) {
    _categories_node_form_alter($form, $parent_category);
  }


  // if editing an existing homepage category
  // OR creating a new category
  // only let the user select one category
  if (!empty($form['#node']->field_category_homepage[LANGUAGE_NONE][0]['tid'])
    || $new_category) {
    $form['field_category'][LANGUAGE_NONE]['#max_choices'] = 1;
    drupal_add_js("jQuery(document).ready(function(){jQuery('.term-reference-tree-level:first > li:first').hide();});", 'inline');

    // if creating a new category, set a form_state variable so we'll know
    // on  node submit to create a taxonomy term for this node
    if ($new_category) {
      $form_state['categories_create'] = TRUE;
    }
  }

  // custom validation function for nodes
  $form['#validate'][] = '_categories_node_validate';
}

function categories_content_submit($form, $form_state) {
  $tid = $form['#node']->field_category_homepage[LANGUAGE_NONE][0]['tid'];

  // find which nodes the user removed
  // then load those nodes and remove this category
  $remove = array_diff($form_state['category_existing_content'], $form_state['values']['category_content']['content']);
  foreach ($remove as $nid) {
    $node = node_load($nid);
    // go through all this node's categories, and remove the one for this category
    foreach ($node->field_category[LANGUAGE_NONE] as $delta => $field) {
      if ($field['tid'] == $tid) {
        unset($node->field_category[LANGUAGE_NONE][$delta]);
        break;
      }
    }
    // ensure deltas are properly set
    $node->field_category[LANGUAGE_NONE] = array_values($node->field_category[LANGUAGE_NONE]);

    node_save($node);
  }

  // find the nodes the user added
  // then load those nodes and add this category
  $add = array_diff($form_state['values']['category_content']['content'], $form_state['category_existing_content']);
  foreach ($add as $nid) {
    $node = node_load($nid);
    $node->field_category[LANGUAGE_NONE][] = array('tid' => $tid);
    node_save($node);
  }

  unset($form_state['values']['category_content']['content']);

  db_merge('categories_settings')
    ->key(array('nid' => $form['#node']->nid))
    ->fields($form_state['values']['category_content'])
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function categories_form_webform_node_form_alter(&$form, &$form_state, $form_id) {
  if (arg(2) == 'form') {
    _categories_node_form_alter($form);
  }
}

function _categories_node_form_alter(&$form, $parent) {
  // load the node from the node ID of the parent category
  $node = node_load($parent);
  if ($node) {
    // get the category homepage for this node
    $tid = $node->field_category_homepage[LANGUAGE_NONE][0]['tid'];
    // set the parent's category homepage as the default category
    $form['field_category'][LANGUAGE_NONE]['#default_value'][$tid] =
      $tid;
  }
}

/**
 * Validation function for nodes
 */
function _categories_node_validate($form, &$form_state) {
  $values = &$form_state['values'];

  // if trying to delete the node
  // AND this node is a category
  if ($values['op'] == 'Delete' &&
    !empty($values['field_category_homepage'][LANGUAGE_NONE][0]['tid'])) {

    // taxonomy term ID of homepage term
    $tid = $values['field_category_homepage'][LANGUAGE_NONE][0]['tid'];

    // get all nodes associated with the homepage
    $nodes = _categories_get_homepage_nodes($form_state['values']['nid'], $tid);
    // if there are any nodes associated
    if (count($nodes)) {

      $items = array();
      $attributes = array('attributes' => array('target' => '_blank'));
      foreach ($nodes as $nid => $title) {
        // if this page is only associated with this category
        // add it to the list of nodes that need moved
        if (db_query('SELECT COUNT(*) FROM {field_data_field_category}
          WHERE entity_type = :node AND entity_id = :nid', array(':node' => 'node', ':nid' => $nid))->fetchField() < 2) {
          $items[] = l($title, 'node/' . $nid, $attributes);
        }
      }

      // if there are any nodes that need moved
      // don't let the user delete this page
      if (count($items)) {
        form_set_error('', 'The following pages are categorized under this page.
          They will no longer have any category if you delete this page.
          You will need to move these pages elsewhere before deleting');
        drupal_set_message(theme('item_list', array('items' => $items)), 'error');
      }
    }
    else {
      $tree = taxonomy_get_tree(variable_get('categories_vid'), $tid);

      if (count($tree)) {
        form_set_error('', 'The following pages are categorized under this page.
          They will no longer have any category if you delete this page.
          You will need to move these pages elsewhere before deleting');
        foreach ($tree as $term) {
          drupal_set_message($term->name, 'error');
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_submit().
 */
function categories_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  // if this is a node being saved
  // and the form_state variable is set to let us know the user is creating a category homepage
  if ($entity_type == 'node'
    && !empty($form_state['categories_create'])) {
    // create a taxonomy term for this node
    $tid = categories_create_taxonomy_term($entity->title, '', $form_state['values']['field_category'][LANGUAGE_NONE][0]['tid']);
    // and set the field_category_homepage to the new taxonomy term ID
    $entity->field_category_homepage[LANGUAGE_NONE][0]['tid'] = $tid;
    $entity->field_category[LANGUAGE_NONE][0]['tid'] = $tid;
  }
}

/**
 * Implements hook_node_presave().
 */
function categories_node_presave($node) {
  if ($node->is_new) {
    return;
  }

  // when user updates a node title for a homepage node
  // update the taxonomy term, too
  if (!empty($node->field_category_homepage[LANGUAGE_NONE][0]['tid'])) {
    $term = taxonomy_term_load($node->field_category_homepage[LANGUAGE_NONE][0]['tid']);
    $save = FALSE;
    if ($term->name != $node->title) {
      $term->name = $node->title;
      $save = TRUE;
    }

    if ((empty($node->original->field_category[LANGUAGE_NONE][0]['tid']) || $node->field_category[LANGUAGE_NONE][0]['tid'] !== $node->original->field_category[LANGUAGE_NONE][0]['tid']) &&
      $node->field_category[LANGUAGE_NONE][0]['tid'] !== $node->field_category_homepage[LANGUAGE_NONE][0]['tid']) {
      $term->parent = array($node->field_category[LANGUAGE_NONE][0]['tid']);
      $node->field_category[LANGUAGE_NONE][0]['tid'] = $node->field_category_homepage[LANGUAGE_NONE][0]['tid'];
      $node->categories_moved = TRUE;
      $save = TRUE;
    }
    if ($save) {
      taxonomy_term_save($term);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function categories_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
 /**
  * @todo  do we want to disable editing the vocab directly, or just catch when people add manually?
  *
  if (0) { // @todo check if categories vocab
    $msg = '';
    $t_args = array()
    drupal_set_message(t($msg, $t_args));
  }
  */
}

/**
 * Implements hook_node_delete().
 */
function categories_node_delete($node) {

  if (!empty($node->field_category_homepage[LANGUAGE_NONE][0]['tid'])) {
    taxonomy_term_delete($node->field_category_homepage[LANGUAGE_NONE][0]['tid']);
  }

}

function categories_get_node_options() {
  $d_args = array(':types' => array('page', 'webform'));
  return db_query('SELECT nid, title FROM {node} WHERE type IN (:types) AND nid NOT IN (SELECT entity_id FROM {field_data_field_category_homepage})
    ORDER BY title', $d_args)->fetchAllKeyed();
}

function categories_add_taxonomy_term($name, $did, $type) {
  $tid = categories_create_taxonomy_term($name);
  db_query('UPDATE {' . $type . '} SET tid = :tid WHERE did = :did', array(':tid' => $tid, ':did' => $did));
}

function categories_create_taxonomy_term($name, $description = '', $parent = 0) {
  $term = (object) array(
    'name' => $name,
    'parent' => array($parent),
    'description' => $description,
    'vid' => variable_get('categories_vid'),
  );

  taxonomy_term_save($term);

  return $term->tid;
}

/**
 * Used on category homepages
 *
 * Get all nodes associated to the taxonomy term this node is a homepage for
 */
function categories_get_homepage_nodes($nid, $orderBy = 'n.changed', $direction = 'DESC') {
  $output = '';
  $tid = db_query("SELECT field_category_homepage_tid FROM {field_data_field_category_homepage}
      WHERE entity_type = 'node' AND bundle = 'page'
      AND entity_id = :nid", array(':nid' => $nid))->fetchField();

  if ($tid) {
    $settings = categories_get_settings($nid);
    $pager = TRUE;
    if ($settings) {
      $pager = $settings['pager_limit'];
      $orderBy = $settings['sort_by'];
      $direction = $settings['sort_order'];
    }
    $nids = _categories_get_homepage_nodes($nid, $tid, $orderBy, $direction, $pager);
    if (count($nids)) {
      $nodes = node_load_multiple(array_keys($nids));
      $title = categories_make_possesive_title(drupal_get_title());

      $output .= '<hr id="content-horizontal">
        <a name="content" id="content"></a>';
      if (!isset($settings['title'])) {
        $output .= "<h1>$title</h1>";
      }
      else {
        $output .= '<h1>' . $settings['title'] . '</h1>';
      }

      $output .= '<br>';

      if ($settings) {
        foreach ($nodes as $node) {
          if (!strlen($node->title)) {
            $node->title = '[untitled]';
          }
          $output .= '<article><' . $settings['tag'] . '>'
            . l($node->title, 'node/' . $node->nid)
            . '</' . $settings['tag'] . '>';
          if ($settings['display_author']) {
            $output .= 'Last updated by '
              . theme('username', array('account' => user_load($node->revision_uid)))
              . ' on ' . date('F j, Y - g:sa', $node->changed);
          }
          if ($settings['summary']) {
            $output .= '<div>';
            if (isset($node->body[LANGUAGE_NONE][0]['summary']) &&
              strlen($node->body[LANGUAGE_NONE][0]['summary'])) {
              $output .= $node->body[LANGUAGE_NONE][0]['summary'];
            }
            else {
              $output .= check_plain(substr($node->body[LANGUAGE_NONE][0]['value'], 0, 250));
            }

            $output .= '</div></article><br>';
          }
        }

        $output .= '<br>';
      }
      else {
         $view = node_view_multiple($nodes, 'teaser');
         $output .= render($view);
         $pager = TRUE;
      }

      if ($pager) {
        global $pager_limits, $pager_page_array;
        $t_arg = array('element' => 0);
        foreach ($pager_page_array as $element => $value) {
          if ($pager_limits[$element] == $pager) {
            $t_arg['element'] = $element;
          }
        }
        $output .= theme('pager', $t_arg);
      }
    }
  }

  return $output;
}

function categories_get_settings($nid) {
  return db_query('SELECT * FROM {categories_settings}
    WHERE nid = :nid', array(':nid' => $nid))->fetchAssoc();
}

/**
 * Helper function.
 *
 * @param  $nid - {node}.nid of category homepage node
 * @param  $tid - {taxonomy_term_data}.tid of taxonomy term $nid is a homepage for
 *
 * @return array keyed by node ID, pointing to node titles of all nodes with the taxonomy term $tid
 */
function _categories_get_homepage_nodes($nid, $tid, $orderBy = FALSE, $direction = FALSE, $pager = FALSE) {
  $query = db_select('taxonomy_index', 't');
  $query->innerJoin('node', 'n', 'n.nid = t.nid');
  $query->addTag('node_access');

  // get node ID's of all subcategories of this category
  $nids = db_query('SELECT _i.nid FROM {taxonomy_term_hierarchy} h
    INNER JOIN {taxonomy_index} _i ON _i.tid = h.tid
    INNER JOIN {field_data_field_category_homepage} c
      ON c.entity_type = :type AND c.entity_id = _i.nid AND c.field_category_homepage_tid = _i.tid
    WHERE parent = :tid', array(':tid' => $tid, ':type' => 'node'))->fetchCol();
  // also add this category node ID to the array, so it won't be returned in the query
  // i.e. we don't the node were viewing to have itself displayed in the list of tagged nodes
  $nids[] = $nid;

  $query->condition('tid', $tid)
        ->condition('t.nid', $nids, 'NOT IN');

  if ($pager) {
    $query = $query->extend('PagerDefault');
    $limit = $pager > 1 ? $pager : 10;
    $query->limit($limit);
  }

  $query->fields('n', array('nid', 'title'));
  if ($orderBy) {
    if (!$direction) {
      $direction = 'DESC';
    }

    $query->orderBy($orderBy, $direction);
  }

  return $query->execute()->fetchAllKeyed();
}

/**
 * Helper function to get the category this $nid belongs to
 */
function categories_get_node_category($nid, $return_function = 'fetchField') {
  return db_query('SELECT field_category_tid AS tid, parent
    FROM {field_data_field_category} c
    INNER JOIN {taxonomy_term_hierarchy} h ON c.field_category_tid = h.tid
    WHERE entity_type = :type AND entity_id = :nid', array(':type' => 'node', ':nid' => $nid)
  )->{$return_function}();
}

function categories_is_homepage_node($nid) {
  $d_args = array(
    ':type' => 'node',
    ':bundle' => 'page',
    ':nid' => $nid,
  );

  return db_query('SELECT field_category_homepage_tid
    FROM {field_data_field_category_homepage}
    WHERE entity_type = :type AND bundle = :bundle AND entity_id = :nid', $d_args
  )->fetchField();
}

function categories_get_homepage_node($tid) {
  $d_args = array(
    ':type' => 'node',
    ':bundle' => 'page',
    ':tid' => $tid,
  );

  return db_query('SELECT entity_id
    FROM {field_data_field_category_homepage}
    WHERE entity_type = :type AND bundle = :bundle AND field_category_homepage_tid = :tid', $d_args
  )->fetchField();
}

function categories_make_possesive_title($title) {
  $title .= "'";
  if (substr($title, -2, 1) !== 's') {
    $title .= 's';
  }

  $title .= ' Content';

  return $title;
}
